# syntax=docker/dockerfile:1

# Use the CUDA 11.8 Developer image as the single base for our environment
# This ensures all build-time and run-time dependencies are available.
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

# Set non-interactive frontend for package installers
ENV DEBIAN_FRONTEND=noninteractive

# --- ROOT-LEVEL INSTALLATIONS ---

# 1. Install all required OS packages in a single layer
# We do NOT install python3/pip from apt, as Miniconda will provide a more
# consistent base Python interpreter for our development tooling (like uv).
RUN apt-get update && apt-get install -y --no-install-recommends \
      curl wget git ca-certificates locales sudo \
      build-essential libssl-dev libffi-dev less nano \
      gnupg software-properties-common \
      r-base fontconfig unzip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# 2. Configure system locale
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# 3. Install Miniconda to be used as the base Python provider
ENV CONDA_DIR=/opt/conda
RUN curl -sSLo /tmp/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py311_25.3.1-1-Linux-x86_64.sh && \
    bash /tmp/miniconda.sh -b -p $CONDA_DIR && \
    rm /tmp/miniconda.sh && \
    $CONDA_DIR/bin/conda clean -y --all

# 4. Add Conda and user-local binaries to the system PATH
# This makes `conda`, `uv`, and `cargo` available in the shell.
ENV PATH="/opt/conda/bin:/home/vscode/.local/bin:/home/vscode/.cargo/bin:${PATH}"

# Add the NodeSource repository for Node.js 20.x (a stable LTS version)
# RUN mkdir -p /etc/apt/keyrings && \
#     curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

# ENV NODE_MAJOR=20
# RUN echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list

# # Install Node.js
# RUN apt-get update && apt-get install nodejs -y

# 5. Install Starship prompt system-wide
RUN curl -sS https://starship.rs/install.sh | sh -s -- --yes

# 6. Create and configure the non-root 'vscode' user
ARG USERNAME=vscode
ARG USER_UID=1000
RUN groupadd --gid ${USER_UID} ${USERNAME} && \
    useradd --uid ${USER_UID} --gid ${USER_UID} -m ${USERNAME} && \
    usermod -aG sudo ${USERNAME} && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} && \
    chmod 440 /etc/sudoers.d/${USERNAME} && \
    mkdir -p /workspaces && chown ${USERNAME}:${USERNAME} /workspaces

# --- USER-LEVEL INSTALLATIONS ---

# 7. Switch to the non-root user for all subsequent steps
USER ${USERNAME}
WORKDIR /home/${USERNAME}

# 7.1 Install Nerd Font for Starship
RUN mkdir -p ~/.local/share/fonts && \
    cd ~/.local/share/fonts && \
    curl -fLO https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/FiraCode.zip && \
    unzip FiraCode.zip && \
    rm FiraCode.zip && \
    fc-cache -fv

# 7.2 Configure Starship to initialize in .bashrc
RUN echo 'eval "$(starship init bash)"' >> ~/.bashrc

# 7.3 Install the Rust toolchain
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable && \
    echo 'source $HOME/.cargo/env' >> ~/.bashrc

# 7.4 Install the Astral uv tool using the official installer script
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# --- PROJECT ENVIRONMENT SETUP ---

# 8. Switch to the main workspace directory
WORKDIR /workspaces/smart_dev

# 8.1 As the 'vscode' user, initialize a new uv project called 'ml-unified'
# This creates the directory and populates it with .gitignore, README.md, etc.
RUN uv init --name ml-unified

# 8.2 Overwrite the default pyproject.toml with your custom one
COPY --chown=${USERNAME}:${USERNAME} .devcontainer/pyproject.toml ./ml-unified/pyproject.toml

# 8.3 Change the working directory INTO the new project folder
# All subsequent commands will run from here.
WORKDIR /workspaces/smart_dev/ml-unified

# 8.4 Bootstrap the uv virtual environment and install all dependencies
# This will create a .venv folder inside /workspaces/smart_dev/ml-unified
RUN uv venv --python 3.11 && \
    uv sync

# 8.5 (CRUCIAL) Explicitly register the .venv as a Jupyter kernel
# This makes it reliably discoverable by VS Code's notebook UI.
RUN uv run python -m ipykernel install \
  --sys-prefix \
  --name "ml-unified" \
  --display-name "ml-unified (Python 3.11)"

  # 9. Set GPU environment variables for PyTorch/TensorFlow
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Keep the container alive for the VS Code server
CMD ["sleep", "infinity"]